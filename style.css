/* 
https://www.w3schools.com/cssref 
https://css-tricks.com/complete-guide-to-css-functions/
https://www.w3schools.com/cssref/css_selectors.asp 
https://www.w3schools.com/cssref/css_units.asp 
*/

/* When live previewing changes if css changes don't show solution is reloading page  */

/* Selector Specificity: (id, class, type) */
/* The :root pseudo-class represents an element that is the root of the document. In HTML, this is always the HTML element. */
:root {
  /* Naming convention with numbers 100 smallest 900 largest, e.g. --fs-300, --fs-400 gives ability to add variables between when needed later in project e.g. --fs-350  */

  /*--variable is css variable and is accessed e.g. color: var(--variable);*/
  --clr-accent-100: hsl(13, 100%, 96%);
  --clr-accent-300: hsl(12, 88%, 75%);
  --clr-accent-400: hsl(12, 88%, 59%);
  --clr-accent-500: hsl(12, 60%, 45%);
  --clr-primary-400: hsl(228, 39%, 23%);
  --clr-neutral-100: hsl(0, 0%, 100%);
  --clr-neutral-200: hsl(0, 0%, 97%);
  --clr-neutral-900: hsl(233, 12%, 13%);

  /*ff - font family*/
  --ff-primary: "Be Vietnam Pro", sans-serif;
  --ff-body: var(--ff-primary);
  --ff-heading: var(--ff-primary);

  /*fw - font weights (thickness)*/
  --fw-regular: 400;
  --fw-semi-bold: 500;
  --fw-bold: 700;

  /* All font sizes being used: */
  /*fs - font sizes; rem - Relative to font-size of the root element e.g. 2rem means 2 times the size of the current root font. The em and rem units are practical in creating perfectly scalable layout!*/
  --fs-300: 0.8125rem; /*13px*/ /* font shouldn't be smaller than 16px, but I am following design file;  base font is 16px */
  --fs-400: 0.875rem; /*14px*/ /*400 for body*/
  --fs-500: 0.9375rem;
  --fs-600: 1rem;
  --fs-700: 1.875rem;
  --fs-800: 2.5rem;
  --fs-900: 3.5rem;

  /* Applying font sizes to custom properties for elements */
  --fs-body: var(--fs-400);
  --fs-primary-heading: var(--fs-800);
  --fs-secondary-heading: var(--fs-700);
  --fs-nav: var(--fs-500);
  --fs-button: var(--fs-300);

  /* Custom properties for spacing */
  --size-100: 0.25rem;
  --size-200: 0.5rem;
  --size-300: 0.75rem;
  --size-400: 1rem;
  --size-500: 1.25rem;
  --size-600: 2rem;
  --size-700: 3rem;
  --size-800: 4rem;
  --size-900: 5rem;
}

/* @media includes CSS properties only if a certain condition is true. */
/* em is used because it is the only unit that is consistent across all browsers when zooming in and out.
em or rem in media query uses default browser settings and is not looking in root font size (unlike everywhere else), changing root font size wont change this 50em  */
@media (min-width: 50em) {
  /* for bigger screens*/
  :root {
    --fs-body: var(--fs-600);
    --fs-primary-heading: var(--fs-900);
    --fs-secondary-heading: var(--fs-800);
    --fs-nav: var(--fs-300);
  }
}

/* Resetting css (this can be always copied) */
/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
* {
  margin: 0;
  padding: 0;
  font: inherit;
  /* Resets font of all elements, e.g. h1 font is normal text*/
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

html,
body {
  min-height: 100%;
  overflow-x: hidden;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture,
svg {
  max-width: 100%;
  display: block;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important; /* important overrides all previous styling of element */
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* General styling */

body {
  font-size: var(--fs-body);
  font-family: var(--ff-body);
  color: var(--clr-primary-400);
}

p:not([class]) {
  opacity: 0.7;
  max-width: 32ch; /* don't get larger than set number of characters */
}

p[data-width="width"] {
  max-width: 45ch;
}

/* button */

.button {
  display: inline-flex; /* if button has icon in it it is best to set display: inline-flex; */
  border: 0; /* remove border */
  text-decoration: none; /* no underline or overline on text */
  border-radius: 100vmax; /* Relative to 1% of viewport's* larger dimension. If the viewport is 50cm wide, 1vw = 0.5cm. */
  padding: 1.25em 2.5em;
  font-weight: var(--fw-bold);
  font-size: var(--fs-button);
  line-height: 1;
  color: var(--clr-neutral-100);
  background-color: var(--clr-accent-400);
  box-shadow: 0 1.125em 1em -1em var(--clr-accent-500);
}

/* select .button with data-type="inverted" */
.button[data-type="inverted"] {
  background-color: var(--clr-neutral-100);
  color: var(--clr-accent-400);
}

.button[data-shadow="none"] {
  box-shadow: none;
}

.button:hover,
.button:focus-visible {
  background-color: var(--clr-accent-300);
}
.button[data-type="inverted"]:hover,
.button[data-type="inverted"]:focus-visible {
  background-color: var(--clr-neutral-100);
  color: var(--clr-accent-300);
}

/* Navigation */

.primary-header {
  padding-top: var(--size-700);
}

.nav-wrapper {
  display: flex; /* Things go next to each other */
  justify-content: space-between;
  align-items: center;
}

/* Don't show mobile-nav-toggle unless screen is small */
.mobile-nav-toggle {
  display: none;
}

.nav-list {
  display: flex;
  gap: clamp(
    var(--size-400),
    5vw,
    var(--size-700)
  ); /* As screen sizes get smaller gap becomes smaller, as we have more space gap widens */ /* The clamp() CSS function clamps a value between an upper and lower bound. clamp() enables selecting a middle value within a range of values between a defined minimum and maximum. It takes three parameters: a minimum value, a preferred value, and a maximum allowed value. */
  font-size: var(--fs-nav);
  font-weight: var(--fw-semi-bold);
}

.nav-list a {
  text-decoration: none;
  color: var(--clr-primary-400);
}

.nav-list a:hover,
.nav-list a:focus {
  color: var(--clr-accent-400);
}

/*! Media queries allays come after anything to override what is higher  */

/* Navigation for small screens */
@media (max-width: 50em) {
  /* CSS attribute selector: everything inside .primary-header with attribute data-overlay gets new stacking context  */
  .primary-header[data-overlay] {
    position: relative;
    z-index: 999;
  }
  .primary-navigation {
    display: none;

    position: fixed;
    padding: var(--size-700);
    inset: 7rem var(--size-400) auto; /* Indenting from top right bottom left */
    max-width: 25rem;
    margin-inline: auto; /* keep it centered */
    background: var(--clr-neutral-100);
    border-radius: var(--size-100);
    box-shadow: 0 0 0.5em rgb(0, 0, 0.05);
  }

  .primary-header[data-overlay]::before {
    content: "";
    position: fixed;
    inset: 0;
    background-image: linear-gradient(rgb(0 0 0/0), rgb(0 0 0/0.8));
  }

  .nav-list {
    display: grid;
    gap: var(--size-600);
    text-align: center;
    font-weight: var(--fw-bold);
  }

  .primary-navigation[data-visible] {
    display: block;
  }

  .mobile-nav-toggle {
    display: block;
    position: fixed;
    top: var(--size-700);
    right: var(--size-400);

    cursor: pointer; /* How cursor appears when hovered */
    background: transparent;
    border: 0;
    padding: 0.5em;
  }

  .mobile-nav-toggle .icon-close {
    display: none;
  }
}

/* footer */

/* logo.svg has fill="var(--logo-color, #242D52)" so if --logo-color is not defined it will have #242D52 color, but in footer it needs to be white that is var(--clr-neutral-100)  */
.primary-footer {
  --logo-color: var(--clr-neutral-100);
}

.primary-footer__wrapper {
  display: grid;
  gap: var(--size-700);
  justify-content: center;
  align-items: start;
  /* You can name grid items by using the grid-area property, and then reference to the name in the grid-template-areas property. */
  /* Show elements beneath each other on smaller screens */
  grid-template-areas:
    "form"
    "nav"
    "social"
    "logo"
    "copyright";
}

.primary-footer__logo {
  grid-area: logo; /* Position footer logo on bottom */
}

.primary-footer__form {
  grid-area: form;
}

.primary-footer__copyright {
  grid-area: copyright;
  text-align: center;
  opacity: 0.7;
}

/*.primary-footer-logo-social {
  grid-area: logo-social;

  display: flex;
  flex-direction: column-reverse; /* column - The flexible items are displayed vertically, as a column; column-reverse - Same as column, but in reverse order *
  align-items: center;
  gap: var(--size-700);
}*/

/* Another way of doing same thing when html element doesn't have it's dedicated class is getting html elements with their number from parent element, like this */
/* :nth-child(number) - number is the child number you are targeting */
/* .primary-footer-wrapper > :nth-child(1) {
  grid-area: logo-social;
} */
.primary-footer__nav-wrapper {
  grid-area: nav;
  margin-inline: auto;
}

/* Footer navigation */

.footer-nav {
  columns: 2;
  gap: clamp(4rem, 10vw, 7rem);
  line-height: 1;
}

.footer-nav a {
  color: var(--clr-neutral-100);
  text-decoration: none;
}
/* main :where(h1, h2, h3) equivalent to main h1, main h2, main h3  */
.footer-nav a:where(:hover, :focus) {
  color: var(--clr-accent-400);
}

.primary-footer__form {
  grid-area: form;

  display: flex;
  gap: var(--size-200);
}

input:where([type="text"], [type="email"]) {
  border-radius: 100vw; /* this allays makes pillow shape */
  border: 0;
  padding: var(--size-300) var(--size-500);
}

@media (min-width: 55.2em) {
  .primary-footer__wrapper {
    /* Show elements besides each other (inline) on larger screens */
    /* grid-template-areas: "logo-social nav form"; */
    grid-template-areas:
      "logo nav form"
      "social nav copyright";
    grid-template-columns: min-content 1fr auto;
  }

  .primary-footer__copyright {
    text-align: right;
  }
}

@media (max-width: 50em) {
  .primary-footer__wrapper > * {
    margin-inline: auto;
  }
}

/* social list */

.social-list {
  display: flex;
  gap: var(--size-600);
}

.social-icon {
  width: var(--size-600);
  aspect-ratio: 1; /* svg icons are squares, to eliminate access hight show them as 1:1 aspect ratio */
  fill: var(--clr-neutral-100);
}

@media (min-width: 50em) {
  .social-list {
    gap: var(--size-300);
  }
  .social-icon {
    width: var(--size-500);
    max-width: revert;
  }
}

/* is function is same as where */
.social-list a:is(:hover, :focus-within) .social-icon {
  fill: var(--clr-accent-400);
}

@media (min-width: 50em) {
  .social-list {
    display: flex;
    gap: var(--size-300);
  }

  .social-icon {
    width: var(--size-500);
  }
}

/* cta */
.cta {
  position: relative;
  isolation: isolate; /* creating new stacking context - element cannot escape outside of element (or go behind element) */ /* to set bg-tablet-pattern.svg in front of background */
  text-align: center;
}

@media (min-width: 50em) {
  .cta {
    text-align: left;
  }
}

/* ::pseudo-element lets you style a specific part of the selected element(s) 
::before creates a pseudo-element that is the first child of the selected element*/
.cta::before {
  content: ""; /* Because it is pseudo element */
  position: absolute;
  z-index: -1; /* to set bg-tablet-pattern.svg behind text */
  inset: 0;
  background-image: url("images/bg-tablet-pattern.svg"),
    url("images/bg-tablet-pattern.svg");
  background-position: -15rem -5rem, 60rem -40rem; /* setting position of each background image of element individually */
  background-repeat: no-repeat;
  opacity: 0.1;
}

/* numbered items */

.numbered-items {
  counter-reset: count; /* Resetting counter. Name of counter is "count" */
  width: fit-content; /* fit-content (allows line wraps when there is not enough space else it has max width) is in between of min-content (element has width of shortest word) and max-content (element has max allowed width, there are no line brakes, on smaller screens it may cause site zooming-out)  */
  margin-inline: auto; /* centering content */
}

.numbered-items li {
  counter-increment: count; /* Increment "count" counter by 1 */
}

.numbered-items div {
  display: grid;
  position: relative;
  align-items: center;
  column-gap: var(--size-300);
  grid-template-columns: min-content 1fr;
}

.numbered-items__title {
  grid-row: 1 / 2; /* grid-row-start: 1; grid-row-end: 2; */
  grid-column: 2/3;
  line-height: 1;
}

.numbered-items__body {
  grid-column: 1/-1; /* Stretch 1 column on whole width */
}

@media (min-width: 30em) {
  .numbered-items__body {
    grid-column: 2/-1; /* Stretch 2 columns on whole width  */
  }
}

.numbered-items div::before,
.numbered-items div::after {
  height: 40px;
}

.numbered-items div::before {
  content: "0" counter(count); /* Numbers are shown as 01 02 ... */
  display: flex;
  align-items: center;
  color: var(--clr-neutral-100);
  font-weight: var(--fw-bold);
  background-color: var(--clr-accent-400);
  padding: 0 var(--size-500);
  border-radius: 100vw;
  grid-row: 1 / 2;
  grid-column: 1 / 2;
}

@media (max-width: 50em) {
  /* Show background beneath text only on small screens */
  .numbered-items div::after {
    --bg: var(--clr-accent-100);
    content: "";
    display: block;
    z-index: -1;
    border-radius: 100vw 0 0 100vw;
    grid-column: 1 / -1;
    grid-row: 1 / 2;
    background: var(--bg);
    box-shadow: 10em 0 0 var(--bg); /*Extend background to right end. Box shadow can't cause overflow, it is visual only. */
  }
}

/* slider */

.slider {
  display: flex;
  gap: var(--size-600);
  list-style: none; /* remove list dots */
}

/* slider component generates div container with this class; editing class to separate slide from edge of the screen */
.a11y-slider-container {
  margin-block: var(--size-700);
  margin-inline: var(--size-400);
}

.slider > * {
  position: relative;
  flex: 0 0 auto;
  width: 100%;
}

@media (min-width: 40em) {
  .slider {
    scroll-padding-inline: 25px;
  }

  .a11y-slider-container {
    margin-inline: 0; /*Slide bleeds over the edge*/
  }
  .slider > * {
    width: 50%; /* On smaller screens 2 images (slides) will be shown*/
  }
}

@media (min-width: 50em) {
  .slider > * {
    width: 35%; /*On larger screens 2.5 slides will be shown */
  }
}

.slider-content {
  border-radius: var(--size-100);
  padding: var(--size-700) var(--size-600) var(--size-600);
  background: var(--clr-neutral-200);
}

.slider img {
  width: var(--size-800);
  position: relative;
  top: calc(var(--size-800) / 2);
  margin-inline: auto;
}
/* Styling dots */
.a11y-slider-dots {
  display: flex;
  justify-content: center;
  margin-block: var(--size-500);
  gap: var(--size-300);
}
.a11y-slider-dots li {
  display: block;
  width: 12px;
  height: 12px;
  padding: 0;
}

.a11y-slider-dots li button {
  display: block;
  font-size: 0;
  text-indent: -9999px; /*Indenting first line of text */
  background: transparent;
  border: 1px solid var(--clr-accent-400) !important;
  width: 100%;
  height: 100%;
  border-radius: 100%;
}

.a11y-slider-dots li button.active {
  background: var(--clr-accent-400);
}

/* hero */

/* on small screens reverse order: first show image then text */
@media (max-width: 50em) {
  .hero__image {
    order: -1;
  }
}

.hero__image::before {
  content: "";
  position: absolute;
  z-index: -1;
  right: 0;
  top: 0;
  width: 80%;
  max-height: 70vh;
  max-height: 70dvh; /* Some browsers don't support dvh, and they will use first 70vh, others will override 70vh with 70dvh */
  aspect-ratio: 1/1.2;
  background-image: url("images/bg-tablet-pattern.svg");
  background-repeat: no-repeat;
  background-position: bottom left;
}

@media (min-width: 50em) {
  .hero__image::before {
    width: 45%;
  }
}

/* sales points */

.sales-points {
  position: relative;
}

.sales-points__blog::before {
  content: url("images/bg-tablet-pattern.svg"); /* Because this image is in middle of page it can't be done properly as background-image so it is done as content */
  position: absolute;
  z-index: -1;
  left: 70%;
  bottom: 90%; /* This works because .sales-points is position: relative; */
  width: 200px;
  aspect-ratio: 1/1.2;
}

@media (min-width: 50em) {
  .sales-points__blog::before {
    left: -500px;
    top: 40%;
    width: 100px;
  }
}

/*! Styles lower in css file override ones that are higher in css file */

/* Utility classes: */
/* Utility classes should override everything else so they should be at the bottom of css file!
Utility classes are great thing as project grows.
Sass can generate utility classes.
Utility classes are self-descriptive, single-purpose CSS classes. The classes tell us exactly what they do, so developers can visualize how these elements will be laid out instead of needing to scan through the underlying CSS e.g. class="flex align-center padding-10".
Convention: classes with numbers in name don't change in media queries, but ones without number may change. */

/* This can be always copied and used when some element needs to be invisible */
.visually-hidden {
  position: absolute;
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

.container {
  /* Locally scoped properties work only in .container class */
  --max-width: 1110px;
  --container-padding: 1rem; /* 16px */

  width: min(
    var(--max-width),
    100% - (var(--container-padding) * 2)
  ); /* width is the smallest of values ; 100% - (var(--padding)*2) separate text from left and right edges for --padding value i.e 16px*/
  margin-inline: auto; /* inline - left to right; auto - horizontally center the element within its container */
}

/* - CSS flexbox:
	- one dimensional (align items in one direction)
	- only horizontal
	- your content shape the layout
- CSS grid:
	- two dimensional (can work on horizontal and vertical axis)
	- your layout shape the content
	- enables intentionally overlap items */
.even-columns {
  display: grid;
  gap: 1rem; /* gap between rows and columns in grid layout */
}

@media (min-width: 50em) {
  .even-columns {
    grid-auto-flow: column; /* Insert auto-placed items column by column, i.e first fill first column then second...; grid-auto-flow: row; first fill first row, then second ...*/
    grid-auto-columns: 1fr; /* equal width of columns; fr is flexible unit only for grid. Fr is a fractional unit and 1fr is for 1 part of the available space. Fr values can be mixed with fixed and percentage values. The fr values will be divided between the space that’s left after what’s taken by the other values. */
  }
}

.vertical-align-center {
  align-items: center;
}

/* This only works on grid and doesn't work on flexbox */
.justify-self-end {
  justify-self: end;
}

@media (min-width: 50em) {
  .justify-self-end-md {
    justify-self: end;
  }
}

/* .flow>*+* - selecting every sibling and omitting first one. 
Same as .flow:not(:first-child) - but this one has high specificity and cannot be overridden easily
:where(.flow:not(:first-child)) - because of :where this has specificity of 0 */
:where(.flow :not(:first-child)) {
  margin-top: var(--flow-spacer, 3em);
  /* If --flow-spacer is not defined it will use 3em, else it will use custom property.  */
}

.text-center {
  text-align: center;
}

.text-center p {
  margin-inline: auto;
}

@media (max-width: 50em) {
  /* sm - small */
  .text-center-sm-only {
    text-align: center;
  }

  .text-center-sm-only p {
    margin-inline: auto;
  }
}

.text-primary-400 {
  color: var(--clr-primary-400);
}
.text-accent-400 {
  color: var(--clr-accent-400);
}
.text-accent-100 {
  color: var(--clr-accent-100);
}
.text-neutral-100 {
  color: var(--clr-neutral-100);
}
.text-neutral-900 {
  color: var(--clr-neutral-900);
}

.bg-primary-400 {
  background-color: var(--clr-primary-400);
}
.bg-accent-400 {
  background-color: var(--clr-accent-400);
}
.bg-accent-100 {
  background-color: var(--clr-accent-100);
}
.bg-neutral-100 {
  background-color: var(--clr-neutral-100);
}
.bg-neutral-900 {
  background-color: var(--clr-neutral-900);
}

.fw-bold {
  font-weight: var(--fw-bold);
}
.fw-semi-bold {
  font-weight: var(--fw-semi-bold);
}
.fw-regular {
  font-weight: var(--fw-regular);
}

.fs-primary-heading {
  font-size: var(--fs-primary-heading);
  line-height: 1.1; /* spacing between lines of text */
}
.fs-secondary-heading {
  font-size: var(--fs-secondary-heading);
  line-height: 1.1;
}

.fs-300 {
  font-size: var(--fs-300);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-600 {
  font-size: var(--fs-600);
}

.padding-block-900 {
  padding: var(--size-900);
}
.padding-block-700 {
  padding: var(--size-700);
}
.margin-bottom-700 {
  margin-block-end: var(--size-700);
}
.margin-top-900 {
  margin-block-start: var(--size-900);
}

.mx-auto {
  margin-inline: auto;
}

.display-sm-none {
  display: none;
}

@media (min-width: 50em) {
  .display-md-inline-flex {
    display: inline-flex;
  }
}
